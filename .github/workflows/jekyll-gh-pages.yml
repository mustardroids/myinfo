# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåü Galactic Portfolio</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Space+Mono&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.11.4/dist/gsap.min.js"></script>
    <style>
        /* üå† BASE STYLES */
        :root {
            --primary: #6e00ff;
            --secondary: #00ffcc;
            --accent: #ff00a0;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            color: #fff;
            font-family: 'Space Mono', monospace;
            overflow-x: hidden;
            background: #0a0a1a;
        }
        
        /* üöÄ CONTAINER */
        .container {
            max-width: 1100px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
            z-index: 10;
        }
        
        /* ü™ê PROFILE CARD */
        .profile {
            margin-top: 5rem;
            padding: 3rem;
            background: rgba(20, 20, 50, 0.3);
            backdrop-filter: blur(15px);
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 0 50px rgba(110, 0, 255, 0.3);
            transform-style: preserve-3d;
            transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            will-change: transform;
        }
        
        .profile:hover {
            transform: translateY(-10px) scale(1.01);
            box-shadow: 0 15px 60px rgba(110, 0, 255, 0.5);
        }
        
        /* üéá HEADINGS */
        h1 {
            font-family: 'Orbitron', sans-serif;
            font-size: 4rem;
            font-weight: 900;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(110, 0, 255, 0.5);
            letter-spacing: 2px;
            line-height: 1.1;
        }
        
        h2 {
            color: rgba(255, 255, 255, 0.8);
            font-weight: 400;
            font-size: 1.5rem;
            margin-bottom: 2rem;
        }
        
        h3 {
            font-family: 'Orbitron', sans-serif;
            color: var(--secondary);
            margin-bottom: 1rem;
            font-size: 1.8rem;
        }
        
        /* üéµ MEDIA CONTAINERS */
        .media-container {
            margin: 3rem 0;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.4);
            transform: perspective(1000px) rotateX(0deg);
            transition: transform 0.5s ease, box-shadow 0.5s ease;
        }
        
        .media-container:hover {
            transform: perspective(1000px) rotateX(5deg);
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
        }
        
        /* üì¶ INTERESTS BOX */
        .interests {
            background: rgba(0, 0, 30, 0.6);
            padding: 2rem;
            border-radius: 20px;
            margin: 3rem 0;
            border-left: 5px solid var(--primary);
            transform: translateY(20px);
            opacity: 0;
        }
        
        .interests ul {
            list-style: none;
        }
        
        .interests li {
            position: relative;
            padding-left: 2rem;
            margin-bottom: 1rem;
            font-size: 1.1rem;
            line-height: 1.6;
        }
        
        .interests li:before {
            content: "‚ú¶";
            position: absolute;
            left: 0;
            color: var(--secondary);
        }
        
        /* üîó SOCIAL BUTTONS */
        .social-links {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 3rem;
            flex-wrap: wrap;
        }
        
        .social-btn {
            padding: 1rem 2rem;
            background: linear-gradient(45deg, var(--primary), var(--accent));
            color: white;
            border: none;
            border-radius: 50px;
            font-family: 'Orbitron', sans-serif;
            font-weight: bold;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            box-shadow: 0 5px 20px rgba(110, 0, 255, 0.4);
            position: relative;
            overflow: hidden;
            z-index: 1;
        }
        
        .social-btn:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, var(--accent), var(--primary));
            transition: all 0.4s ease;
            z-index: -1;
        }
        
        .social-btn:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 15px 30px rgba(255, 0, 160, 0.6);
        }
        
        .social-btn:hover:before {
            left: 0;
        }
        
        /* üéá ANIMATED CUBE PFP */
        .pfp-container {
            position: relative;
            width: 200px;
            height: 200px;
            margin: 0 auto 2rem;
            perspective: 1000px;
        }
        
        .pfp {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 3px solid var(--primary);
            object-fit: cover;
            box-shadow: 0 0 50px rgba(110, 0, 255, 0.7);
            transform-style: preserve-3d;
            animation: float 8s ease-in-out infinite, rotate 20s linear infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotateY(0deg); }
            50% { transform: translateY(-20px) rotateY(180deg); }
        }
        
        @keyframes rotate {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(360deg); }
        }
        
        .pfp-glow {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle at center, var(--primary), transparent 70%);
            filter: blur(20px);
            opacity: 0.7;
            animation: pulse 4s ease-in-out infinite alternate;
        }
        
        @keyframes pulse {
            0% { transform: scale(0.9); opacity: 0.5; }
            100% { transform: scale(1.1); opacity: 0.9; }
        }
        
        /* ‚ú® PARTICLES */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        }
        
        /* üì± RESPONSIVE */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .profile {
                padding: 2rem 1.5rem;
                margin-top: 3rem;
            }
            
            h1 {
                font-size: 2.5rem;
            }
            
            h2 {
                font-size: 1.2rem;
            }
            
            .pfp-container {
                width: 150px;
                height: 150px;
            }
            
            .social-links {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }
            
            .social-btn {
                width: 100%;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- üåå 3D GALAXY BACKGROUND -->
    <div id="galaxy-bg"></div>
    
    <!-- ‚ú® PARTICLES -->
    <canvas id="particles" class="particles"></canvas>
    
    <div class="container">
        <div class="profile">
            <!-- üéá ANIMATED PROFILE PICTURE -->
            <div class="pfp-container">
                <div class="pfp-glow"></div>
                <img src="https://i.gifer.com/7QlW.gif" alt="Animated Cube GIF" class="pfp">
            </div>
            
            <h1>YOUR NAME</h1>
            <h2>Digital Creator & Space Explorer</h2>
            
            <!-- üì¶ INTERESTS BOX -->
            <div class="interests" id="interests">
                <h3>üöÄ What I'm Into</h3>
                <ul>
                    <li>Making websites (too lazy to buy a domain)</li>
                    <li>Developing random tools that solve problems</li>
                    <li>Creating stuff that makes me happy</li>
                    <li>Vibing to Freddie Gibbs when coding</li>
                    <li>Exploring the intersection of tech and art</li>
                </ul>
            </div>
            
            <!-- üéµ SPOTIFY PLAYER (100% WORKING) -->
            <div class="media-container">
                <iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/5sWuhWy3RRq3OZGkFC1kqZ?utm_source=generator&theme=0" 
                        width="100%" 
                        height="152" 
                        frameborder="0" 
                        allowfullscreen="" 
                        allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                        loading="lazy">
                </iframe>
            </div>
            
            <!-- üì∫ YOUTUBE EMBED -->
            <div class="media-container">
                <iframe width="100%" 
                        height="400" 
                        src="https://www.youtube.com/embed?listType=user_uploads&list=Societe" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                </iframe>
            </div>
            
            <!-- üîó SOCIAL BUTTONS -->
            <div class="social-links">
                <a href="https://discord.gg/p6AM9W5KVd" class="social-btn">Join My Discord</a>
                <a href="https://www.youtube.com/@societe" class="social-btn">YouTube Channel</a>
            </div>
        </div>
    </div>
    
    <script>
        // ======================
        // üå† 3D GALAXY BACKGROUND
        // ======================
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true,
            canvas: document.getElementById('galaxy-bg')
        });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);
        
        // Create stars with different sizes and colors
        const starsGeometry = new THREE.BufferGeometry();
        const starsCount = 5000;
        
        const positions = new Float32Array(starsCount * 3);
        const colors = new Float32Array(starsCount * 3);
        const sizes = new Float32Array(starsCount);
        
        for (let i = 0; i < starsCount; i++) {
            const i3 = i * 3;
            
            // Random positions
            positions[i3] = (Math.random() - 0.5) * 2000;
            positions[i3 + 1] = (Math.random() - 0.5) * 2000;
            positions[i3 + 2] = (Math.random() - 0.5) * 2000;
            
            // Random colors (blue, purple, white)
            const color = new THREE.Color();
            const rand = Math.random();
            if (rand > 0.9) {
                color.setHSL(0.7, 0.8, 0.8); // purple
            } else if (rand > 0.7) {
                color.setHSL(0.6, 0.8, 0.8); // blue
            } else {
                color.setHSL(0, 0, 0.8 + Math.random() * 0.2); // white
            }
            
            colors[i3] = color.r;
            colors[i3 + 1] = color.g;
            colors[i3 + 2] = color.b;
            
            // Random sizes
            sizes[i] = Math.random() * 1.5 + 0.5;
        }
        
        starsGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        starsGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        starsGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
        
        const starsMaterial = new THREE.PointsMaterial({
            size: 1,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
            blending: THREE.AdditiveBlending,
            sizeAttenuation: true
        });
        
        const stars = new THREE.Points(starsGeometry, starsMaterial);
        scene.add(stars);
        
        camera.position.z = 500;
        
        // ======================
        // ‚ú® CANVAS PARTICLES
        // ======================
        const canvas = document.getElementById('particles');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const particlesArray = [];
        const particleCount = window.innerWidth < 768 ? 50 : 100;
        
        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 1 - 0.5;
                this.speedY = Math.random() * 1 - 0.5;
                this.color = `hsl(${Math.random() * 60 + 200}, 100%, 50%)`;
                this.opacity = Math.random() * 0.6 + 0.1;
            }
            
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                
                if (this.x < 0 || this.x > canvas.width) {
                    this.speedX = -this.speedX;
                }
                
                if (this.y < 0 || this.y > canvas.height) {
                    this.speedY = -this.speedY;
                }
            }
            
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.opacity;
                ctx.fill();
            }
        }
        
        function initParticles() {
            for (let i = 0; i < particleCount; i++) {
                particlesArray.push(new Particle());
            }
        }
        
        function animateParticles() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
                particlesArray[i].draw();
            }
            
            requestAnimationFrame(animateParticles);
        }
        
        initParticles();
        animateParticles();
        
        // ======================
        // üéá GSAP ANIMATIONS
        // ======================
        document.addEventListener('DOMContentLoaded', () => {
            // Initial setup
            gsap.set('.profile', { opacity: 0, y: 50 });
            gsap.set('.pfp-container', { opacity: 0, scale: 0.8 });
            gsap.set('h1, h2', { opacity: 0, y: 20 });
            gsap.set('.interests', { opacity: 0, y: 30 });
            gsap.set('.media-container', { opacity: 0, y: 40 });
            gsap.set('.social-links', { opacity: 0, y: 50 });
            
            // Master timeline
            const tl = gsap.timeline({ defaults: { ease: 'power3.out' } });
            
            tl.to('.profile', { opacity: 1, y: 0, duration: 1 })
              .to('.pfp-container', { opacity: 1, scale: 1, duration: 0.8 }, '-=0.8')
              .to('h1', { opacity: 1, y: 0, duration: 0.6 }, '-=0.6')
              .to('h2', { opacity: 1, y: 0, duration: 0.6 }, '-=0.5')
              .to('#interests', { opacity: 1, y: 0, duration: 0.8 }, '-=0.4')
              .to('.media-container', { opacity: 1, y: 0, duration: 0.8, stagger: 0.2 }, '-=0.4')
              .to('.social-links', { opacity: 1, y: 0, duration: 0.8 }, '-=0.4');
            
            // Continuous animations
            gsap.to('.pfp-glow', {
                scale: 1.2,
                opacity: 0.9,
                duration: 3,
                repeat: -1,
                yoyo: true,
                ease: 'sine.inOut'
            });
            
            // Hover effects
            document.querySelectorAll('.social-btn').forEach(btn => {
                btn.addEventListener('mouseenter', () => {
                    gsap.to(btn, {
                        y: -5,
                        duration: 0.3,
                        ease: 'power2.out'
                    });
                });
                
                btn.addEventListener('mouseleave', () => {
                    gsap.to(btn, {
                        y: 0,
                        duration: 0.3,
                        ease: 'power2.out'
                    });
                });
            });
        });
        
        // ======================
        // üñ•Ô∏è WINDOW RESIZE
        // ======================
        function handleResize() {
            // Three.js resize
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            
            // Canvas particles resize
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        
        window.addEventListener('resize', handleResize);
        
        // ======================
        // üöÄ MAIN ANIMATION LOOP
        // ======================
        function animate() {
            requestAnimationFrame(animate);
            
            // Rotate stars
            stars.rotation.x += 0.0002;
            stars.rotation.y += 0.0003;
            
            renderer.render(scene, camera);
        }
        
        animate();
    </script>
</body>
</html>
